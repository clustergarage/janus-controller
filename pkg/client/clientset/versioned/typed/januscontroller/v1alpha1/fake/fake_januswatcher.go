// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "clustergarage.io/janus-controller/pkg/apis/januscontroller/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeJanusWatchers implements JanusWatcherInterface
type FakeJanusWatchers struct {
	Fake *FakeJanuscontrollerV1alpha1
	ns   string
}

var januswatchersResource = schema.GroupVersionResource{Group: "januscontroller.clustergarage.io", Version: "v1alpha1", Resource: "januswatchers"}

var januswatchersKind = schema.GroupVersionKind{Group: "januscontroller.clustergarage.io", Version: "v1alpha1", Kind: "JanusWatcher"}

// Get takes name of the janusWatcher, and returns the corresponding janusWatcher object, and an error if there is any.
func (c *FakeJanusWatchers) Get(name string, options v1.GetOptions) (result *v1alpha1.JanusWatcher, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(januswatchersResource, c.ns, name), &v1alpha1.JanusWatcher{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.JanusWatcher), err
}

// List takes label and field selectors, and returns the list of JanusWatchers that match those selectors.
func (c *FakeJanusWatchers) List(opts v1.ListOptions) (result *v1alpha1.JanusWatcherList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(januswatchersResource, januswatchersKind, c.ns, opts), &v1alpha1.JanusWatcherList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.JanusWatcherList{ListMeta: obj.(*v1alpha1.JanusWatcherList).ListMeta}
	for _, item := range obj.(*v1alpha1.JanusWatcherList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested janusWatchers.
func (c *FakeJanusWatchers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(januswatchersResource, c.ns, opts))

}

// Create takes the representation of a janusWatcher and creates it.  Returns the server's representation of the janusWatcher, and an error, if there is any.
func (c *FakeJanusWatchers) Create(janusWatcher *v1alpha1.JanusWatcher) (result *v1alpha1.JanusWatcher, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(januswatchersResource, c.ns, janusWatcher), &v1alpha1.JanusWatcher{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.JanusWatcher), err
}

// Update takes the representation of a janusWatcher and updates it. Returns the server's representation of the janusWatcher, and an error, if there is any.
func (c *FakeJanusWatchers) Update(janusWatcher *v1alpha1.JanusWatcher) (result *v1alpha1.JanusWatcher, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(januswatchersResource, c.ns, janusWatcher), &v1alpha1.JanusWatcher{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.JanusWatcher), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeJanusWatchers) UpdateStatus(janusWatcher *v1alpha1.JanusWatcher) (*v1alpha1.JanusWatcher, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(januswatchersResource, "status", c.ns, janusWatcher), &v1alpha1.JanusWatcher{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.JanusWatcher), err
}

// Delete takes name of the janusWatcher and deletes it. Returns an error if one occurs.
func (c *FakeJanusWatchers) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(januswatchersResource, c.ns, name), &v1alpha1.JanusWatcher{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeJanusWatchers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(januswatchersResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.JanusWatcherList{})
	return err
}

// Patch applies the patch and returns the patched janusWatcher.
func (c *FakeJanusWatchers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.JanusWatcher, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(januswatchersResource, c.ns, name, data, subresources...), &v1alpha1.JanusWatcher{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.JanusWatcher), err
}
